/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DropletObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	Disk *int64 `json:"disk,omitempty" tf:"disk,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPv4Address *string `json:"ipv4Address,omitempty" tf:"ipv4_address,omitempty"`

	IPv4AddressPrivate *string `json:"ipv4AddressPrivate,omitempty" tf:"ipv4_address_private,omitempty"`

	IPv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address,omitempty"`

	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	Memory *int64 `json:"memory,omitempty" tf:"memory,omitempty"`

	PriceHourly *float64 `json:"priceHourly,omitempty" tf:"price_hourly,omitempty"`

	PriceMonthly *float64 `json:"priceMonthly,omitempty" tf:"price_monthly,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Urn *string `json:"urn,omitempty" tf:"urn,omitempty"`

	Vcpus *int64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`
}

type DropletParameters struct {

	// +kubebuilder:validation:Optional
	Backups *bool `json:"backups,omitempty" tf:"backups,omitempty"`

	// +kubebuilder:validation:Optional
	DropletAgent *bool `json:"dropletAgent,omitempty" tf:"droplet_agent,omitempty"`

	// +kubebuilder:validation:Optional
	GracefulShutdown *bool `json:"gracefulShutdown,omitempty" tf:"graceful_shutdown,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// +kubebuilder:validation:Required
	Image *string `json:"image" tf:"image,omitempty"`

	// +kubebuilder:validation:Optional
	Monitoring *bool `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateNetworking *bool `json:"privateNetworking,omitempty" tf:"private_networking,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	ResizeDisk *bool `json:"resizeDisk,omitempty" tf:"resize_disk,omitempty"`

	// +kubebuilder:validation:Optional
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// +kubebuilder:validation:Required
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// +kubebuilder:validation:Optional
	VPCUUID *string `json:"vpcUuid,omitempty" tf:"vpc_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeIds []*string `json:"volumeIds,omitempty" tf:"volume_ids,omitempty"`
}

// DropletSpec defines the desired state of Droplet
type DropletSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DropletParameters `json:"forProvider"`
}

// DropletStatus defines the observed state of Droplet.
type DropletStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DropletObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Droplet is the Schema for the Droplets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,digitaloceanjet}
type Droplet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DropletSpec   `json:"spec"`
	Status            DropletStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DropletList contains a list of Droplets
type DropletList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Droplet `json:"items"`
}

// Repository type metadata.
var (
	Droplet_Kind             = "Droplet"
	Droplet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Droplet_Kind}.String()
	Droplet_KindAPIVersion   = Droplet_Kind + "." + CRDGroupVersion.String()
	Droplet_GroupVersionKind = CRDGroupVersion.WithKind(Droplet_Kind)
)

func init() {
	SchemeBuilder.Register(&Droplet{}, &DropletList{})
}
