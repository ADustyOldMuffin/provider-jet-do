/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseReplicaObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	PrivateHost *string `json:"privateHost,omitempty" tf:"private_host,omitempty"`

	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type DatabaseReplicaParameters struct {

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +crossplane:generate:reference:type=DatabaseCluster
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateNetworkUUID *string `json:"privateNetworkUuid,omitempty" tf:"private_network_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// DatabaseReplicaSpec defines the desired state of DatabaseReplica
type DatabaseReplicaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseReplicaParameters `json:"forProvider"`
}

// DatabaseReplicaStatus defines the observed state of DatabaseReplica.
type DatabaseReplicaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseReplicaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseReplica is the Schema for the DatabaseReplicas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,digitaloceanjet}
type DatabaseReplica struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseReplicaSpec   `json:"spec"`
	Status            DatabaseReplicaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseReplicaList contains a list of DatabaseReplicas
type DatabaseReplicaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseReplica `json:"items"`
}

// Repository type metadata.
var (
	DatabaseReplica_Kind             = "DatabaseReplica"
	DatabaseReplica_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseReplica_Kind}.String()
	DatabaseReplica_KindAPIVersion   = DatabaseReplica_Kind + "." + CRDGroupVersion.String()
	DatabaseReplica_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseReplica_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseReplica{}, &DatabaseReplicaList{})
}
