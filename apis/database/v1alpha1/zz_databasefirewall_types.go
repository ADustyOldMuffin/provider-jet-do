/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseFirewallObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DatabaseFirewallParameters struct {

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	Rule []RuleParameters `json:"rule" tf:"rule,omitempty"`
}

type RuleObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type RuleParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// DatabaseFirewallSpec defines the desired state of DatabaseFirewall
type DatabaseFirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseFirewallParameters `json:"forProvider"`
}

// DatabaseFirewallStatus defines the observed state of DatabaseFirewall.
type DatabaseFirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseFirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseFirewall is the Schema for the DatabaseFirewalls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,digitaloceanjet}
type DatabaseFirewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseFirewallSpec   `json:"spec"`
	Status            DatabaseFirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseFirewallList contains a list of DatabaseFirewalls
type DatabaseFirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseFirewall `json:"items"`
}

// Repository type metadata.
var (
	DatabaseFirewall_Kind             = "DatabaseFirewall"
	DatabaseFirewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseFirewall_Kind}.String()
	DatabaseFirewall_KindAPIVersion   = DatabaseFirewall_Kind + "." + CRDGroupVersion.String()
	DatabaseFirewall_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseFirewall_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseFirewall{}, &DatabaseFirewallList{})
}
